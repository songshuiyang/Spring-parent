<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
         http://www.springframework.org/schema/beans/spring-beans.xsd
         http://www.springframework.org/schema/context
         http://www.springframework.org/schema/context/spring-context.xsd
         http://www.springframework.org/schema/aop
         http://www.springframework.org/schema/aop/spring-aop.xsd
         http://www.springframework.org/schema/tx
         http://www.springframework.org/schema/tx/spring-tx.xsd">
    <context:component-scan base-package="com.tx"/>

    <context:property-placeholder location="classpath:jdbc.properties"/>
    <!-- 数据库连接池 -->
    <!--    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
              init-method="init" destroy-method="close">
            <property name="driverClassName">
                <value>${driver}</value>
            </property>
            <property name="url">
                <value>${url}</value>
            </property>
            <property name="username">
                <value>${username}</value>
            </property>
            <property name="password">
                <value>${password}</value>
            </property>
            &lt;!&ndash; 连接池最大使用连接数 &ndash;&gt;
            <property name="maxActive">
                <value>20</value>
            </property>
            &lt;!&ndash; 初始化连接大小 &ndash;&gt;
            <property name="initialSize">
                <value>1</value>
            </property>
            &lt;!&ndash; 获取连接最大等待时间 &ndash;&gt;
            <property name="maxWait">
                <value>60000</value>
            </property>
            &lt;!&ndash; 连接池最大空闲 &ndash;&gt;
            &lt;!&ndash;  <property name="maxIdle">
                  <value>20</value>
              </property>&ndash;&gt;
            &lt;!&ndash; 连接池最小空闲 &ndash;&gt;
            <property name="minIdle">
                <value>3</value>
            </property>
            &lt;!&ndash; 自动清除无用连接 &ndash;&gt;
            <property name="removeAbandoned">
                <value>true</value>
            </property>
            &lt;!&ndash; 清除无用连接的等待时间 &ndash;&gt;
            <property name="removeAbandonedTimeout">
                <value>180</value>
            </property>
            &lt;!&ndash; 连接属性 &ndash;&gt;
            <property name="connectionProperties">
                <value>clientEncoding=UTF-8</value>
            </property>
        </bean>-->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="driverClass" value="${driver}"/>
        <property name="jdbcUrl" value="${url}"/>
        <property name="user" value="${username}"/>
        <property name="password" value="${password}"/>
    </bean>

    <bean id="accountDao" class="com.tx.mapper.AccountDaoImpl">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <!--配置事务管理器-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <!-- 定义事务管理的模板 :Spring为了简化事务管理的代码而提供的类  -->
    <bean id="transactionTemplate" class="org.springframework.transaction.support.TransactionTemplate">
        <property name="transactionManager" ref="transactionManager"/>
    </bean>

    <!-- 基于TransactionProxyFactoryBean的方式,采用spring-aop的方式，需要用到代理模式-->
    <bean id="accountServiceProxy"
          class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean">
        <!-- 配置目标对象 -->
        <property name="target" ref="accountService1Impl"/>
        <!-- 注入事务管理器  -->
        <property name="transactionManager" ref="transactionManager"/>
        <!-- 注入事务属性 -->
        <property name="transactionAttributes">
            <props>
                <!--
                   格式 ，key为方法名称
                   PROPAGATION:事务的传播行为
                   ISOLATION:事务的隔离级别
                   readOnly:只读
                   Exception：发生哪些异常，回滚事务
                   +Exception：发生哪些异常不回滚
                 -->
                <prop key="transfer">PROPAGATION_REQUIRED</prop>
            </props>
        </property>
    </bean>
    <!--基于AspectJ的XML方式-->
    <!--事务增强-->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <!--事务属性定义-->
        <tx:attributes>
            <tx:method name="save*" propagation="REQUIRED"/>
            <tx:method name="add*" propagation="REQUIRED"/>
            <tx:method name="remove*" propagation="REQUIRED"/>
            <tx:method name="update*" propagation="REQUIRED"/>
            <tx:method name="execute*" propagation="REQUIRED"/>
            <tx:method name="generate*" propagation="REQUIRES_NEW"/>
            <tx:method name="*" propagation="SUPPORTS"/>
        </tx:attributes>
    </tx:advice>
    <aop:config>
        <!--通过aop定义事务增强切面-->
        <aop:pointcut expression="execution(* com.tx.service1.impl.*.*(..))" id="pointcut1"/>
        <!--引用事务增强-->
        <aop:advisor advice-ref="txAdvice" pointcut-ref="pointcut1"/>
    </aop:config>

    <!-- 开启注解事务 -->
    <tx:annotation-driven transaction-manager="transactionManager"/>
</beans>